#!/usr/bin/env python
#
# Copyright 2009 Canonical Ltd.
#
# Authors: Neil Jagdish Patel <neil.patel@canonical.com>
#          Jono Bacon <jono@ubuntu.com>
#          Stephen Irons
#
# This program is free software: you can redistribute it and/or modify it 
# under the terms of either or both of the following licenses:
#
# 1) the GNU Lesser General Public License version 3, as published by the 
# Free Software Foundation; and/or
# 2) the GNU Lesser General Public License version 2.1, as published by 
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the applicable version of the GNU Lesser General Public 
# License for more details.
#
# You should have received a copy of both the GNU Lesser General Public 
# License version 3 and version 2.1 along with this program.  If not, see 
# <http://www.gnu.org/licenses/>
#

import gobject
import gtk
import appindicator
import os



menuitems = [
              ("Shut Down"  , "system-shutdown-panel", "gnome-session-quit --power-off"),
              ("Log Out"    , "gnome-log-out"        , "gnome-session-quit --logout"   ),
              ("Switch User", "system-users"         , "dm-tool switch-to-greeter"     ),
            ]


import re

class User:
   def __init__(self, username, uid, fullname):
      self.username = username
      self.uid = uid
      self.fullname = fullname
      
   def __str__(self):
      return self.fullname + '(' + '%d' % self.uid + ':' + self.username + ')'


def find_login_users():
   # Find UID_MIN, the lowest UID for a real user
   UID_MIN = None
   logins = '/etc/login.defs'
   with open(logins, 'r') as f:
       for l in f:
          results = re.findall('^(UID_MIN)\s+(\d+)', l)
          #print l, results, len(results)
          if len(results) != 0:
             UID_MIN_tup = results[0]
             UID_MIN_str = UID_MIN_tup[1]
             UID_MIN = int(UID_MIN_str)
             print '*****', UID_MIN_tup, UID_MIN_str, UID_MIN+1

   users = []
   passwd = '/etc/passwd'
   lines = open(passwd, 'r').readlines()
   for l in lines:
      results = re.findall('^([^:]*):[^:]*:([^:]*):[^:]*:([^:,]*).+/bin/bash', l) # TODO: Make this more readable
      for user_details in results:
         if len(user_details) > 0:
            user = user_details[0]
            uid = int(user_details[1])
            fullname = user_details[2]
            if uid >= UID_MIN:
               users.append(User(user, uid, fullname))
   users.sort(key=lambda u: u.fullname)
   return users


if __name__ == "__main__":

  ind = appindicator.Indicator ("example-simple-client",
                              "indicator-messages",
                              appindicator.CATEGORY_APPLICATION_STATUS)
  ind.set_status (appindicator.STATUS_ACTIVE)
  ind.set_attention_icon ("indicator-messages-new")
  ind.set_icon("system-shutdown-panel")

  # create a menu
  menu = gtk.Menu()

  for m in menuitems:
     menu_item = gtk.ImageMenuItem(m[0])
     menu_item.set_image(gtk.image_new_from_icon_name(m[1], gtk.ICON_SIZE_MENU))
     menu_item.set_always_show_image(True)
     menu_item.connect("activate", lambda w, cmd: os.system(cmd), m[2])
     menu_item.show()
     menu.append(menu_item)

  users = find_login_users()
  
  for u in users:
     menu_item = gtk
     menu_item = gtk.ImageMenuItem(u.fullname)
     #menu_item.set_image(gtk.image_new_from_stock(gtk.STOCK_INFO, gtk.ICON_SIZE_MENU))
     #menu_item.set_image(gtk.image_new_from_file('/usr/share/pixmaps/faces/soccerball.png')) # TODO: Load from $HOME/.face or background image
     menu_item.set_always_show_image(True)
     menu_item.connect("activate", lambda w, username: os.system('dm-tool switch-to-user %s' %  username), u.username)
     menu_item.show()
     menu.append(menu_item)

  ind.set_menu(menu)

  gtk.main()

